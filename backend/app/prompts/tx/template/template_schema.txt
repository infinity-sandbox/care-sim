Here is the extended schema that provides more detailed definitions for the key schemas.

Table: oshistory_detail
The oshistory_detail table contains detailed monitoring data related to the operating 
system’s performance metrics over time. It records system-level statistics such as 
CPU usage, memory status, disk activity, and network connections, offering a snapshot 
of the system’s health and performance during specific sessions.

Column Descriptions:
	1.	rl: Auto-incremented primary key for each row, representing a unique record identifier.
	2.	session_id: A timestamp indicating the start of a session for which the operating system’s data was collected.
	3.	dt: The date and time when the system monitoring data was recorded, representing when each record was captured.
	4.	server_name: The name of the server where the operating system is being monitored.
	5.	process_queue_len: The length of the process queue, indicating how many processes are waiting to be executed.
	6.	physical_mem_free: The amount of free physical memory (RAM) available in the system during the monitoring period.
	7.	page_file_usage: The amount of page file (virtual memory) usage at the time of monitoring.
	8.	disk_transfers: The number of disk transfers (reads/writes) occurring during the monitoring period.
	9.	processes: The total number of processes running on the system during the monitoring period.
	10.	context_switches: The number of context switches, representing the switching of CPU resources between different processes or threads.
	11.	tcp_connections: The number of active TCP network connections on the server at the time of monitoring.
	12.	cpu_user: The percentage of CPU time spent on user-level processes (applications) during the monitoring session.
	13.	cpu_sys: The percentage of CPU time spent on system-level processes (kernel operations).
	14.	is_windows: A flag (Y or N) indicating whether the server is running a Windows operating system.
	15.	sys_load: The overall system load, representing the demand on CPU resources.
	16.	swap_mem_usage: The amount of swap memory being used during the monitoring session.
	17.	cpu_io: The percentage of CPU time spent on input/output operations during the monitoring session.
	18.	cpu_max: The maximum CPU utilization recorded during the monitoring period.
	19.	cpu_nice: The percentage of CPU time spent on processes with adjusted priorities (typically low-priority tasks).
	20.	swap_pagein: The number of pages swapped into memory from disk.
	21.	swap_pageout: The number of pages swapped out of memory to disk.
	22.	server_id: The unique identifier for the server where the monitoring data is collected.
	23.	cpuusedpercent: The percentage of overall CPU usage during the monitoring period.
	24.	mem_used: The total amount of memory (RAM) used at the time of monitoring.
	25.	mem_used_per: The percentage of total memory (RAM) used during the monitoring session.


Table: business_txn_avg
This table records aggregated data related to business transactions, providing key metrics on performance, 
errors, and server health during specific time periods. The table contains information on transaction 
counts, response times, server statuses, and various error types.

Column Descriptions:
    1.	rl: Auto-incremented primary key for each record, representing a unique identifier for a row.
    2.	dt: Timestamp indicating when the data was recorded. It tracks the date and time of the transaction averages.
    3.	app: The name of the application associated with the transactions being monitored.
    4.	txn_count: Total number of transactions that occurred during the specified time interval.
    5.	art: Average response time (in seconds or milliseconds) for all transactions within the given period.
    6.	success_count: Number of successful transactions during the recorded interval.
    7.	errors_count: Total number of failed transactions or errors encountered.
    8.	server_up: The count of servers that were operational and running during the monitoring period.
    9.	server_down: The count of servers that were down or unreachable during the monitoring period.
    10.	server_slow: The count of servers that experienced slow response times during the monitoring period.
    11.	http_errors_count: The number of HTTP-related errors (such as 4xx or 5xx status codes) encountered during transactions.
    12.	sql_errors_count: The number of SQL-related errors, indicating issues with database operations during transactions.
    13.	jndi_errors_count: The number of JNDI (Java Naming and Directory Interface) errors encountered during the transactions.
    14.	downServers: A longtext field listing the specific servers that were down during the monitoring period.
    15.	slowServers: A longtext field listing the specific servers that experienced slow performance during the monitoring period.
    16.	ws_errors_count: The count of errors encountered with web services (WS) during transactions.
    17.	cpu_percent: The average CPU usage (as a percentage) across all monitored servers during the transaction period.
    18.	heap_percent: The percentage of heap memory (JVM memory) used during the transaction period.
    19.	physical_mem_percent: The percentage of physical memory (RAM) used during the transaction period.
    20.	through_put: The transaction throughput, representing the rate of successful transactions per second or minute.


Table: intellitrace_errors
The intellitrace_errors table stores detailed information about errors and exceptions occurring in 
an application or server environment. This table tracks error types, related servers, client information, 
and exception details, which is useful for diagnosing issues, troubleshooting, and maintaining application 
health.

Column Descriptions:
    1.	id: Auto-incremented primary key that uniquely identifies each error record.
    2.	error_type: A single-character field representing the type or category of the error. Could be used to differentiate between different error levels or types (e.g., fatal, warning, etc.).
    3.	server_name: The name of the server where the error or exception occurred.
    4.	NAME: A detailed name or label associated with the error, possibly identifying the specific component or application module where the error occurred.
    5.	CODE: A numeric code that represents the error, often used to identify specific error conditions or types.
    6.	CLIENT: The name or identifier of the client associated with the error, which could be a user, an external system, or an application making requests to the server.
    7.	ip: The IP address associated with the client or system where the error originated.
    8.	excep_at: The timestamp indicating when the exception or error occurred.
    9.	excep_stack: A long text field that contains the exception stack trace, providing detailed technical information about the error, including the sequence of function calls leading up to the error.
    10.	excep_count: The number of times this specific error or exception has occurred, which could be useful for identifying recurring issues.
    11.	excep_reason: A long text field explaining the reason for the error, providing context or additional information about why the exception happened.
    12.	excep_sql_State: The SQL state code associated with a database-related error, often used for diagnosing issues that arise during database transactions or queries.
    13.	server_id: The unique identifier of the server where the error occurred.
    14.	bgrp: A grouping or categorization field, which could represent a business group or functional area where the error originated.


    
Table: monitor_data
The monitor_data table captures key performance metrics and operational data for servers and 
applications. It is used to track and monitor resource usage, system performance, and errors over 
time. This table plays a critical role in performance analysis, alerting, and capacity planning.

Column Descriptions:
    1.	rl: Auto-incremented primary key used to uniquely identify each record in the table.
    2.	session_id: The timestamp representing the session or monitoring period for which the data was collected.
    3.	dt: The timestamp indicating the exact time when the monitoring data was recorded.
    4.	heap_free: The amount of free heap memory (in bytes) available at the time of data collection. Useful for tracking memory utilization.
    5.	heap_used: The amount of heap memory (in bytes) actively used during the monitoring period. A critical metric for understanding application memory consumption.
    6.	queue_size: The size of the process or task queue, representing the number of tasks waiting for execution. Helps identify bottlenecks or overloaded processes.
    7.	waiters_count: The number of threads or processes that are waiting for a resource to become available, which indicates potential contention for resources.
    8.	throughput: A performance metric that measures the amount of work or data processed within a given time frame. Often used to assess server or application efficiency.
    9.	cpuusedpercent: The percentage of CPU being utilized at the time of data collection, indicating how much of the server’s processing power is in use.
    10.	art: The average response time (in milliseconds or seconds), which reflects how long the server or application takes to respond to requests.
    11.	errors_count: The total number of errors encountered during the session. This metric helps monitor the overall health and stability of the system.
    12.	server_name: The name of the server from which the monitoring data is collected. Useful for identifying which machine the data corresponds to in multi-server environments.
    13.	heap_max: The maximum heap memory (in bytes) that the server or application is allowed to use. Helps in determining if the application is nearing its memory limits.
    14.	server_id: A unique identifier for the server. Used to link monitoring data to a specific server in a larger infrastructure.


Table: process_details
The process_details table contains information about various processes running on a server. 
It captures performance-related metrics and data on disk usage, I/O operations, and process-specific 
information. This table is typically used for monitoring, diagnosing, and managing processes on servers.

Column Descriptions:
    1.	id: A unique identifier for the process (up to 50 characters). This could be a system-generated or application-specific process ID.
    2.	tid: Thread ID associated with the process, used to track individual threads within a process.
    3.	prio: Process priority, indicating how the operating system schedules the process for CPU resources. A higher priority may lead to faster execution.
    4.	user_data: Data related to the user who owns or initiated the process. This helps identify who is running the process.
    5.	diskRead: The amount of data (in bytes or kilobytes) read from the disk by the process. Useful for identifying processes with high disk I/O.
    6.	diskWrite: The amount of data (in bytes or kilobytes) written to the disk by the process.
    7.	swapin: The amount of data swapped in from disk to memory for the process, useful for monitoring swap usage and memory performance.
    8.	io: Input/output operations for the process, measuring the total number of I/O operations performed.
    9.	command: The full command or script that initiated the process (up to 5000 characters), providing detailed information about what the process is doing.
    10.	server: The server where the process is running. This could be a server name or address, allowing tracking of processes across different machines.
    11.	dt: The timestamp representing when the process details were captured. Uses the current timestamp by default.
    12.	server_id: A unique identifier for the server. Used to associate process data with specific servers in a multi-server setup.
    13.	pname: The name of the process (up to 250 characters), which provides an easy-to-read identifier for each process.
    

Table: server_details
The server_details table holds comprehensive information about the servers in a system. It tracks various 
server attributes, including hardware specifications, network details, and operating system 
information. This table is typically used for server monitoring, system audits, and hardware 
performance assessments.

Column Descriptions:
	1.	rl: Primary key, a unique identifier for each record, usually an auto-incrementing integer.
	2.	modified_at: The timestamp when the record was last modified, defaulting to the current timestamp. This tracks the last update to the server details.
	3.	systeminfo: Detailed system information in long text format, which may include extensive hardware and software configuration data.
	4.	hostname: The server’s hostname (up to 100 characters), identifying the server within the network.
	5.	ip: The server’s IP address (up to 50 characters), used for network communication and identification.
	6.	os_name: The name of the operating system running on the server (up to 100 characters), such as Linux, Windows, etc.
	7.	os_ver: The version of the operating system (up to 100 characters), specifying the OS release or build.
	8.	boot_time: The server’s boot time, recorded as a string (up to 100 characters), representing when the server was last started.
	9.	time_zone: The time zone in which the server is located or configured (up to 100 characters), such as “UTC” or “PST.”
	10.	sys_type: The type of system, typically denoting if it’s a physical server, virtual machine, or cloud-based system (up to 100 characters).
	11.	ram_memory: The server’s total RAM memory size (up to 50 characters), generally recorded in GB or MB.
	12.	vendor: The server hardware vendor or manufacturer (up to 100 characters), like Dell, HP, etc.
	13.	cpu_cores: The number of physical CPU cores in the server, representing the number of individual processing units available.
	14.	logical_processors: The number of logical processors, which include both physical cores and hyper-threaded cores, used for parallel processing.
	15.	threads_per_core: The number of threads per CPU core, typically 1 or 2 in modern CPUs that support hyper-threading.
	16.	cores_per_socket: The number of CPU cores in each socket, which helps understand the server’s CPU socket configuration.
	17.	cpu_max_mhz: The maximum clock speed of the CPU in MHz, indicating the peak performance capability of the processor.
	18.	cpu_min_mhz: The minimum clock speed of the CPU in MHz, indicating the baseline performance of the processor.
	19.	ipconfig: Network interface configuration details in long text format, which may include multiple IP addresses, subnet masks, and other networking details.


Table: txn
The txn table stores transaction details related to client-server interactions, including trace 
information, performance metrics, and service-level agreements (SLAs). It tracks data about the 
success and timing of transactions, helping to monitor system performance and diagnose potential 
issues.

Column Descriptions:
    1.	id: A unique identifier for each transaction (varchar, up to 50 characters). This is the primary key.
    2.	client_id: An integer representing the client associated with the transaction. This is required and helps in associating transactions with specific clients.
    3.	server_name: The name of the server (varchar, up to 100 characters) involved in the transaction. This can be indexed for faster lookups.
    4.	name: The name of the transaction or process (varchar, up to 100 characters). Indexed to allow efficient searching and filtering.
    5.	started: A timestamp indicating when the transaction started. This can be indexed to improve querying based on start times.
    6.	duration: The duration of the transaction in milliseconds (bigint). Used to analyze the performance of transactions.
    7.	trace_available: A flag (char(1)) indicating whether trace data is available for this transaction (‘Y’ or ‘N’).
    8.	meeting_slamax: A flag (varchar(2)) indicating if the transaction met the maximum SLA requirements (‘Y’ or ‘N’).
    9.	meeting_slaavg: A flag (varchar(2)) indicating if the transaction met the average SLA requirements (‘Y’ or ‘N’).
    10.	success: A flag (char(1)) indicating whether the transaction was successful (‘Y’ or ‘N’). Indexed for quicker access.
    11.	is_slow: A flag (char(1)) that indicates if the transaction was marked as slow (‘Y’ or ‘N’).
    12.	trace: A long binary object (blob) storing trace data, useful for detailed debugging of transactions.
    13.	ip: The IP address (varchar, up to 50 characters) from which the transaction originated.
    14.	paramString: A string (varchar, up to 1000 characters) containing parameters passed during the transaction.
    15.	method_name: The name of the method invoked during the transaction (varchar, up to 500 characters).
    16.	sla_max: An integer indicating the maximum SLA value that was set for the transaction.
    17.	sla_avg: An integer representing the average SLA value assigned to the transaction.
    18.	arc_app_id: A string (varchar, up to 50 characters) representing the application ID associated with this transaction. Indexed for faster lookups.
    19.	arc_trace_level: An integer denoting the trace level of the transaction. Used to indicate the level of trace information recorded.
    20.	time_unit: A string (varchar, up to 2 characters) representing the time unit for transaction measurements (e.g., ‘ms’ for milliseconds).
    21.	jms_msg_id: A string (varchar, up to 200 characters) representing the JMS message ID associated with this transaction. Indexed for faster lookup.
    22.	req_lat: A bigint representing the request latency in milliseconds.
    23.	city: The city (varchar, up to 30 characters) associated with the transaction, which could be useful for geographic analysis of transactions.


Table: slow_txn
The slow_txn table captures information about transactions that are marked as slow, helping 
to monitor performance issues and trigger alerts when necessary.

Column Descriptions:
    1.	id: A unique identifier for each slow transaction (varchar, up to 50 characters). This serves as the primary key.
    2.	client_id: An integer representing the client associated with the slow transaction. This field is required.
    3.	server_name: The name of the server (varchar, up to 100 characters) involved in the slow transaction. This field is indexed for efficient querying.
    4.	name: The name of the transaction or process (varchar, up to 100 characters).
    5.	started: A timestamp indicating when the slow transaction started. This field is indexed and has a default value of CURRENT_TIMESTAMP, which helps track when the slow transactions occurred.
    6.	is_slow: A flag (char(1)) indicating whether the transaction is slow ('Y' for yes or 'N' for no).
    7.	fail_count: An integer representing the number of times the transaction has failed. Defaults to 0.
    8.	alert_count: An integer indicating how many alerts have been triggered for this slow transaction. Defaults to 0.

Table: http_errors
The http_errors table is designed to log HTTP error occurrences, capturing essential 
information for diagnosing issues related to web requests.

Column Descriptions:
    1.	started: A timestamp indicating when the HTTP error occurred. This field is indexed for efficient querying.
    2.	server_name: The name of the server (varchar, up to 100 characters) that processed the request that resulted in an error.
    3.	exception_msg: A long text field that contains the error message or exception details related to the HTTP error. This can provide insights into what went wrong.
    4.	uri: The Uniform Resource Identifier (URI) that was requested when the error occurred (varchar, up to 255 characters).
    5.	id: A unique identifier for each HTTP error record (int). This serves as the primary key and is set to auto-increment.
    6.	ip: The IP address (varchar, up to 100 characters) of the client making the request that led to the error.
    7.	CODE: An integer representing the HTTP status code associated with the error, defaulting to 500 (Internal Server Error).
    8.	server_id: An integer identifying the specific server (default value is 0) that logged the error.
